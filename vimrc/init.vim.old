let fancy_symbols_enabled = 1

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.config/nvim/autoload/plug.vim')

if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.config/nvim/autoload
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

call plug#begin("~/.config/nvim/plugged")
    Plug 'junegunn/vim-emoji'
    Plug 'goerz/jupytext.vim'
    Plug 'vim-scripts/indentpython.vim'
    Plug 'tmhedberg/SimpylFold'
    " Treinamento para vim
    Plug 'vim-utils/vim-man'
    Plug 'ThePrimeagen/vim-be-good', {'do': './install.sh'}
    Plug 'gruvbox-community/gruvbox'
    Plug 'dracula/vim', { 'as': 'dracula' }
    " Snippets
    Plug 'MarcWeber/vim-addon-mw-utils'
    Plug 'tomtom/tlib_vim'
    Plug 'honza/vim-snippets'
    Plug 'garbas/vim-snipmate'
    "dockerfile
    Plug 'ekalinin/Dockerfile.vim'
    " Code commenter
    Plug 'scrooloose/nerdcommenter'
    " Better file browser
    Plug 'scrooloose/nerdtree'
    " Class/module browser
    Plug 'majutsushi/tagbar'
    " Search results counter
    Plug 'vim-scripts/IndexedSearch'
    " A couple of nice colorschemes
    " Plug 'fisadev/fisa-vim-colorscheme'
    Plug 'patstockwell/vim-monokai-tasty'
    " Airline
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " Code and files fuzzy finder
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    " Pending tasks list
    Plug 'fisadev/FixedTaskList.vim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
    " Python autocompletion
    Plug 'deoplete-plugins/deoplete-jedi'
    " Completion from other opened files
    Plug 'Shougo/context_filetype.vim'
    " Just to add the python go-to-definition and similar features, autocompletion
    " from this plugin is disabled
    Plug 'davidhalter/jedi-vim'
    " Automatically close parenthesis, etc
    Plug 'Townk/vim-autoclose'
    " Surround
    Plug 'tpope/vim-surround'
    " Indent text object
    Plug 'michaeljsmith/vim-indent-object'
    " Indentation based movements
    Plug 'jeetsukumaran/vim-indentwise'
    " Better language packs
    Plug 'sheerun/vim-polyglot'
    " Ack code search (requires ack installed in the system)
    Plug 'mileszs/ack.vim'
    " Paint css colors with the real color
    Plug 'lilydjwg/colorizer'
    " Window chooser
    Plug 't9md/vim-choosewin'
    " Automatically sort python imports
    Plug 'fisadev/vim-isort'
    " Highlight matching html tags
    Plug 'valloric/MatchTagAlways'
    " Generate html in a simple way
    Plug 'mattn/emmet-vim'
    " Git integration
    Plug 'tpope/vim-fugitive'
    " Git/mercurial/others diff icons on the side of the file lines
    Plug 'mhinz/vim-signify'
    " Yank history navigation
    Plug 'vim-scripts/YankRing.vim'
    " Linters
    Plug 'neomake/neomake'
    " Relative numbering of lines (0 is the current line)
    " (disabled by default because is very intrusive and can't be easily toggled
    " on/off. When the plugin is present, will always activate the relative
    " numbering every time you go to normal mode. Author refuses to add a setting
    " to avoid that)
    Plug 'myusuf3/numbers.vim'
    " Nice icons in the file explorer and file type status line.
    Plug 'ryanoasis/vim-devicons'
    " Async autocompletion
    if vim_plug_just_installed
        Plug 'Shougo/deoplete.nvim', {'do': ':autocmd VimEnter * UpdateRemotePlugins'}
    else
        Plug 'Shougo/deoplete.nvim'
    endif
    
    Plug 'godlygeek/tabular'
    Plug 'plasticboy/vim-markdown'
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
    Plug 'vimwiki/vimwiki'
call plug#end()

" Install plugins the first time vim runs
    if vim_plug_just_installed
        echo "Installing Bundles, please ignore key map error messages"
        :PlugInstall
    endif

" remove ugly vertical lines on window division
set fillchars+=vert:\ 

" needed so deoplete can auto select the first suggestion
set completeopt+=noinsert
set completeopt-=preview

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" save as sudo
ca w!! w !sudo tee "%"

" clear search results
nnoremap <silent> // :noh<CR>

" clear empty spaces at the end of lines on save of python files
autocmd BufWritePre *.py :%s/\s\+$//e

" fix problems with uncommon shells (fish, xonsh) and plugins running commands
" (neomake, ...)
set shell=/bin/bash 

" Ability to add python breakpoints
" (I use ipdb, but you can change it to whatever tool you use for debugging)
au FileType python map <silent> <leader>b Oimport ipdb; ipdb.set_trace()<esc>

" ============================================================================
" Plugins settings and mappings
" Edit them as you wish.
" Tagbar -----------------------------
    " toggle tagbar display
    map <F4> :TagbarToggle<CR>
    " autofocus on tagbar open
    let g:tagbar_autofocus = 1

" NERDTree -----------------------------
    " toggle nerdtree display
    map <F3> :NERDTreeToggle<CR>
    " open nerdtree with the current file selected
    nmap ,t :NERDTreeFind<CR>
    " don;t show these file types
    let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
    let NERDTreeShowLineNumbers=1
    autocmd FileType nerdtree setlocal relativenumber
    
" Enable folder icons
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1
    
    " Fix directory colors
    highlight! link NERDTreeFlags NERDTreeDir
    
    " Remove expandable arrow
    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
    let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
    let NERDTreeDirArrowExpandable = "\u00a0"
    let NERDTreeDirArrowCollapsible = "\u00a0"
    let NERDTreeNodeDelimiter = "\x07"

    " Autorefresh on tree focus
    function! NERDTreeRefresh()
        if &filetype == "nerdtree"
            silent exe substitute(mapcheck("R"), "<CR>", "", "")
        endif
    endfunction
    
    autocmd BufEnter * call NERDTreeRefresh()

    function! Captura()
        :!captura
        :pu
    endfunction

" Tasklist ------------------------------
    " show pending tasks list
    map <F2> :TaskList<CR>
    
    " Neomake ------------------------------
    " Run linter on write
    autocmd! BufWritePost * Neomake
    
    " Check code as python3 by default
    let g:neomake_python_python_maker = neomake#makers#ft#python#python()
    let g:neomake_python_flake8_maker = neomake#makers#ft#python#flake8()
    let g:neomake_python_python_maker.exe = 'python3 -m py_compile'
    let g:neomake_python_flake8_maker.exe = 'python3 -m flake8'
    
    " Disable error messages inside the buffer, next to the problematic line
    let g:neomake_virtualtext_current_error = 0
    
" Fzf ------------------------------
    " file finder mapping
    nmap ,e :Files<CR>
    " tags (symbols) in current file finder mapping
    nmap ,g :BTag<CR>
    " the same, but with the word under the cursor pre filled
    nmap ,wg :execute ":BTag " . expand('<cword>')<CR>
    " tags (symbols) in all files finder mapping
    nmap ,G :Tags<CR>
    " the same, but with the word under the cursor pre filled
    nmap ,wG :execute ":Tags " . expand('<cword>')<CR>
    " general code finder in current file mapping
    nmap ,f :BLines<CR>
    " the same, but with the word under the cursor pre filled
    nmap ,wf :execute ":BLines " . expand('<cword>')<CR>
    " general code finder in all files mapping
    nmap ,F :Lines<CR>
    " the same, but with the word under the cursor pre filled
    nmap ,wF :execute ":Lines " . expand('<cword>')<CR>
    " commands finder mapping
    nmap ,c :Commands<CR>
    
" Deoplete -----------------------------
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1
    call deoplete#custom#option({
    \   'ignore_case': v:true,
    \   'smart_case': v:true,
    \})
    " complete with words from any opened file
    let g:context_filetype#same_filetypes = {}
    let g:context_filetype#same_filetypes._ = '_'
    :nmap <A-CR> <Plug>VimwikiFollowLink
" Jedi-vim ------------------------------
    " Disable autocompletion (using deoplete instead)
    let g:jedi#completions_enabled = 0
    
    " All these mappings work only for python code:
    " Go to definition
    let g:jedi#goto_command = ',d'
    " Find ocurrences
    let g:jedi#usages_command = ',o'
    " Find assignments
    let g:jedi#goto_assignments_command = ',a'
    " Go to definition in new tab
    nmap ,D :vertical split<CR>:call jedi#goto()<CR>
    
" Ack.vim ------------------------------
    " mappings
    nmap ,r :Ack 
    nmap ,wr :execute ":Ack " . expand('<cword>')<CR>
    
" Window Chooser ------------------------------
    " mapping
    nmap  -  <Plug>(choosewin)
    " show big letters
    let g:choosewin_overlay_enable = 1
    
" Signify ------------------------------
    " this first setting decides in which order try to guess your current vcs
    " UPDATE it to reflect your preferences, it will speed up opening files
    let g:signify_vcs_list = ['git', 'hg']
    "
    " mappings to jump to changed blocks
    nmap <leader>sn <plug>(signify-next-hunk)
    nmap <leader>sp <plug>(signify-prev-hunk)
    "

" Autoclose ------------------------------
    " Fix to let ESC work as espected with Autoclose plugin
    " (without this, when showing an autocompletion window, ESC won't leave insert
    "  mode)
    let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}
    
" Yankring -------------------------------
    let g:yankring_history_dir = '~/.config/nvim/tmp'
    let g:yankring_clipboard_monitor = 0

" Airline ------------------------------
    let g:airline_powerline_fonts = 0
    let g:airline_theme = 'bubblegum'
    let g:airline#extensions#whitespace#enabled = 0
 
" Fancy Symbols!!
    if fancy_symbols_enabled
        let g:webdevicons_enable = 1
        " custom airline symbols
        if !exists('g:airline_symbols')
        let g:airline_symbols = {}
        endif
        let g:airline_left_sep = ''
        let g:airline_left_alt_sep = ''
        let g:airline_right_sep = ''
        let g:airline_right_alt_sep = ''
        let g:airline_symbols.branch = '⭠'
        let g:airline_symbols.readonly = '⭤'
        let g:airline_symbols.linenr = '⭡'
    else
        let g:webdevicons_enable = 0
    endif

let g:user_emmet_leader_key=' '

"mappings
    nnoremap <space> za
    nnoremap <C-J> <C-W><C-J>
    nnoremap <C-K> <C-W><C-K>
    nnoremap <C-L> <C-W><C-L>
    nnoremap <C-H> <C-W><C-H>
    let mapleader=" "
    nnoremap <Leader>+ :vertical resize +15<CR>
    nnoremap <Leader>- :vertical resize -15<CR>
    map <silent> <leader>md :MarkdownPreview<CR>
    map <silent> <leader>cp :call Captura()<CR>

"settings
    syntax on
    set clipboard=unnamedplus
    set nu
    set incsearch
    set smartcase
    set hlsearch
    set foldmethod=indent
    set foldlevel=99
    set encoding=utf-8
    set nobackup
    set undodir=/home/alexandre/.config/nvim/tmp/undodir
    set undofile
    set noswapfile
    set nowrap
    set noerrorbells
    set clipboard=unnamedplus
    set relativenumber
    
    set colorcolumn=80
    highlight ColorColumn ctermbg=0 guibg=lightgrey

"Filetypes
    au BufNewFile,BufRead *.js silent!
        set tabstop=2
        set softtabstop=2
        set shiftwidth=2
	    
    au BufNewFile,BufRead *.html silent!
        set tabstop=2
        set softtabstop=2
        set shiftwidth=2
    
        
    au BufNewFile,BufRead *.css silent!
        set tabstop=2
        set softtabstop=2
        set shiftwidth=2
    
    au BufNewFile,BufRead *.py silent!
        set tabstop=4
        set softtabstop=4
        set shiftwidth=4
        set expandtab
        set autoindent
        set fileformat=unix
    
    autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2

"colorscheme
    colorscheme gruvbox
    let g:gruvbox_contrast_dark='hard'
    set background=dark
    highlight Normal ctermbg=none
    highlight NonText ctermbg=none

let g:jupytext_fmt = 'py'

let g:snips_author="Alexandre Castro"
let g:snips_email="im.alexandre07@gmail.com"
let g:snips_github="https://www.github.com/im-alexandre"
set completefunc=emoji#complete

"airline symbols
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    
    " unicode symbols
    let g:airline_left_sep = '»'
    let g:airline_left_sep = '▶'
    let g:airline_right_sep = '«'
    let g:airline_right_sep = '◀'
    let g:airline_symbols.crypt = '🔒'
    let g:airline_symbols.linenr = '☰'
    let g:airline_symbols.linenr = '␊'
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.linenr = 'Ξ'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.maxlinenr = '㏑'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.spell = 'Ꞩ'
    let g:airline_symbols.notexists = 'Ɇ'
    let g:airline_symbols.whitespace = 'Ξ'
